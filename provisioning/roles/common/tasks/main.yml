---
# Install slackpkg

# Check slackpkg installed
 - name: Check slackpkg
   stat: path=/var/log/packages/slackpkg
   register: state
 - debug: msg="{{state.stat.exists}}"

# Copy slackpkg to managed machine
 - name: Copy slackpkg
   copy: src="{{slackpkg_path}}" dest=/root/slackpkg.tgz
   when: not state.stat.exists 
# Install slackpkg
 - name: Install slackpkg
   command: installpkg /root/slackpkg.tgz
   register: out
   when: not state.stat.exists 
 - debug: msg="{{out.stderr}}"
   when:  not state.stat.exists 
 - debug: msg="{{out.stdout_lines}}"
   when: not state.stat.exists 

# remove pkg
 - name: Remove slackpkg.tgz
   file: path=/root/slackpkg.tgz state=absent
   when:  not state.stat.exists 

# Set up mirrors
 - name: Set up mirrors
   template: src=mirrors dest=/etc/slackpkg/mirrors
 - template: src=slackpkg.conf dest=/etc/slackpkg/slackpkg.conf

# Update slackpkg
 - name: Update slackpkg
   command: slackpkg -default_answer=y -batch=on update
   register: out
 - debug: msg="{{ out }}"

# Copy startup script template
 - name: Copy rc.M script
   template: src=rc.M dest=/etc/rc.d/rc.M backup=yes mode=0755

# Link /usr/lib to /usr/lib64
 - stat: path=/usr/lib
   register: status
 - name: link /usr/lib to /usr/lib64
   command: mv /usr/lib/* /usr/lib64/
   when: not status.stat.islnk 
   ignore_errors: True
 - file: path=/usr/lib state=absent
 - file: src=/usr/lib64 dest=/usr/lib state=link

# Install packages
 - name: Install packages with slackpkg
   slackpkg: name="{{ item }}" state=present update_cache=true
   register: out
   with_items:
    - iptables
    - libnl3
    - pip
    - pysetuptools

 - debug: msg="{{out}}"

# Copy iptables startup rules
 - name: Copy iptables.save
   template: src=iptables.save dest=/etc/iptables.save mode=0700

# Copy iptables starup script
 - name: Copy rc.firewall
   template: src=rc.firewall  dest=/etc/rc.d/rc.firewall mode=0700

# Copy logrotate config
 - name: Copy logrotate config
   template: src=logrotate dest=/etc/logrotate.d/logrotate

# Start firewall rules
 - name: Start firewall
   command: /etc/rc.d/rc.firewall start
   register: out 
 - debug: msg="{{out}}"

# Stop rpc 
 - name: Stop rpc
   command: /etc/rc.d/rc.rpc stop
   ignore_errors: True

# Disable rpc on startup
 - name: Disable rpc on startup
   file: path=/etc/rc.d/rc.rpc mode=0644
   ignore_errors: True

# Add users
 - name: Add users
   user: name={{ item.name }} state=present groups={{ item.groups }}
   with_items:
    - { name: '{{user1}}', groups: 'wheel' }
    - { name: '{{user2}}', groups: 'wheel' }

 - name: set default pass for user1
   command: bash -c "echo {{user1}}:{{default_pass}} | chpasswd"

 - name: set default pass for user2
   command: bash -c "echo {{user2}}:{{default_pass}} | chpasswd"

 - name: set permissions for wheel group
   lineinfile: "dest=/etc/sudoers state=present regexp='^%wheel' line='%wheel ALL=(ALL)  ALL'"

# Install pip from package if you have no custom repo
# - name: Install pip
#   stat: path=/var/log/packages/pip
#   register: state

# - copy: src="{{pip_path}}" dest=/root/pip.tgz
#   when: not state.stat.exists
# - command: installpkg  /root/pip.tgz
#   when: not state.stat.exists
# - file: path=/root/pip.tgz state=absent
#   when: not state.stat.exists

# Instal pysetuptools if you have no custom repo

 #- name: Install pysetuptools
   #stat: path=/var/log/packages/pysetuptools
   #register: state

 #- copy: src="{{pysetuptools_path}}" dest=/root/pysetuptools.tgz
   #when: not state.stat.exists
 #- command: installpkg  /root/pysetuptools.tgz
   #when: not state.stat.exists
 #- file: path=/root/pysetuptools.tgz state=absent
   #when: not state.stat.exists




